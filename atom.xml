<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SorcererXW&#39;s Blog</title>
  
  <subtitle>Tech, Life &amp; Thought</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sorcererxw.com/"/>
  <updated>2018-09-19T04:19:51.206Z</updated>
  <id>http://blog.sorcererxw.com/</id>
  
  <author>
    <name>SorcererXW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浙大软院路由器配置指南</title>
    <link href="http://blog.sorcererxw.com/2018/09/12/zjucst-router-config/"/>
    <id>http://blog.sorcererxw.com/2018/09/12/zjucst-router-config/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-19T04:19:51.206Z</updated>
    
    <content type="html"><![CDATA[<p>刚入学, 发现校园网是使用 srun 3000 进行认证, 可以使用客户端或或者网页认证. 可是无论是客户端还是网页, 登录之后都有一个不能关闭的窗口, 一旦关闭就断开网络, <del>虽然可以丢到一个新建的桌面, 眼不见心不烦</del>, 这是不能忍的.</p><p>幸好, 把本科期间的路由器带来了, 我的路由器是华硕的 P1900, 刷了原版梅林系统, 不过下面的操作, 对于 OpenWRT 也是一样的.</p><h1 id="失败-使用Linux客户端"><a href="#失败-使用Linux客户端" class="headerlink" title="失败: 使用Linux客户端"></a>失败: 使用Linux客户端</h1><p>在 196.0.0.6 的文档里面, 关于 linux 登录的说明是使用 srun 3000 的专用 auth 程序进行登录. </p><p>但是, 测试后发现, 这个程序无法在路由器上进行运行, 会出现 <code>Syntax error: &quot;(&quot; unexpected</code> 错误, Google 之后知道是这个客户端的编译方式无法在路由器上运行</p><h1 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h1><p>既然客户端不行, 那就试试看模拟登陆. 在网页上登录, 用 Chrome 控制台查看了一下, 发现就是往 <code>192.0.0.6/cgi-bin/</code> 发送了一个请求, 登录用户名密码保存在 formdata 里面 ( 密码使用 md5 处理过了) </p><p>这样子以来, 自己使用 curl 命令也能实现登录, 不过处理异常信息会比较麻烦.</p><h2 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h2><p>搜索了一下, 发现 github 已经有软院的校网<a href="https://github.com/0xHJK/srunauth" target="_blank" rel="noopener">验证脚本</a>了, 感谢作者🙏</p><p>考虑到路由器没有连上网络, 无法直接 clone 项目, 我把代码贴出来, 直接复制黏贴到 ssh 里面就好了.</p><p>首先把路由器的外部网络(wan) 切换到动态 ip 模式</p><p>ssh 进入路由器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以放置再任意的目录, 我放在 /jffs, 请不要选择 /tmp 目录, 包括 /tmp 下的任意子目录, 可能会被定时清除</span><br><span class="line">cd /jffs</span><br><span class="line">mkdir srunauth</span><br><span class="line">cd srunauth</span><br><span class="line">vi auth.sh</span><br></pre></td></tr></table></figure><p>贴上一面一段代码, 根据注释, 进行修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># 如果路由器没有 bash ( /bin/bash ) 就替换成 /bin/sh</span></span><br><span class="line"><span class="comment"># Author HJK &lt;https://github.com/0xHJK&gt;</span></span><br><span class="line"></span><br><span class="line">USERNAME=<span class="string">''</span> <span class="comment"># 填上用户名 ( 学号 )</span></span><br><span class="line">PASSWORD=<span class="string">''</span> <span class="comment"># 密码 ( 直接填, 不需要 md5 )</span></span><br><span class="line">USERSFILE=<span class="string">'users.txt'</span></span><br><span class="line">STATEFILE=<span class="string">'state.txt'</span></span><br><span class="line">DOMAIN=<span class="string">'192.0.0.6'</span></span><br><span class="line">COMMOND=<span class="string">'do_login'</span></span><br><span class="line">VERBOSE=<span class="string">'y'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: bash `basename <span class="variable">$0</span>` [-q] [-u username] [-p password] [-f file] [Commond]"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Commonds: login, logout"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">md5_hash</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [[ `uname | grep <span class="string">'Darwin'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="variable">$&#123;1&#125;</span> | md5 -q | cut -c9-24</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="variable">$&#123;1&#125;</span> | md5sum | cut -c9-24</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">say_out</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;VERBOSE&#125;</span> == <span class="string">'y'</span> ]]; <span class="keyword">then</span> <span class="built_in">echo</span> $*; <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">submit</span></span>()&#123;</span><br><span class="line">    msg=`curl -s <span class="string">"http://<span class="variable">$&#123;DOMAIN&#125;</span>/cgi-bin/<span class="variable">$&#123;1&#125;</span>"</span> -H <span class="string">'Pragma: no-cache'</span> -H <span class="string">"Origin: http://<span class="variable">$&#123;DOMAIN&#125;</span>"</span> -H <span class="string">'Accept-Encoding: gzip, deflate'</span> -H <span class="string">'Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4'</span> -H <span class="string">'User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)'</span> -H <span class="string">'Content-Type: application/x-www-form-urlencoded'</span> -H <span class="string">'Accept: */*'</span> -H <span class="string">'Cache-Control: no-cache'</span> -H <span class="string">"Referer: http://<span class="variable">$&#123;DOMAIN&#125;</span>/"</span> -H <span class="string">'Connection: keep-alive'</span> -H <span class="string">'DNT: 1'</span> --data <span class="string">"username=<span class="variable">$&#123;2&#125;</span>&amp;password=<span class="variable">$&#123;3&#125;</span>&amp;drop=0&amp;type=1&amp;n=1"</span> --compressed`</span><br><span class="line">    <span class="keyword">if</span> [[ `<span class="built_in">echo</span> <span class="variable">$&#123;msg&#125;</span> | grep <span class="string">'ip_exist_error'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"IP尚未下线  <span class="variable">$&#123;msg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">elif</span> [[ `<span class="built_in">echo</span> <span class="variable">$&#123;msg&#125;</span> | grep <span class="string">'online_num_error'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"账号 <span class="variable">$&#123;USERNAME&#125;</span> 登录人数超过限额 <span class="variable">$&#123;msg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">elif</span> [[ `<span class="built_in">echo</span> <span class="variable">$&#123;msg&#125;</span> | grep <span class="string">'username_error'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"用户名 <span class="variable">$&#123;USERNAME&#125;</span> 错误  <span class="variable">$&#123;msg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">elif</span> [[ `<span class="built_in">echo</span> <span class="variable">$&#123;msg&#125;</span> | grep <span class="string">'password_error'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"密码 <span class="variable">$&#123;PASSWORD&#125;</span> 错误  <span class="variable">$&#123;msg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">elif</span> [[ `<span class="built_in">echo</span> <span class="variable">$&#123;msg&#125;</span> | grep <span class="string">'logout_ok'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"账号 <span class="variable">$&#123;USERNAME&#125;</span> 注销成功  <span class="variable">$&#123;msg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">elif</span> [[ `<span class="built_in">echo</span> <span class="variable">$&#123;msg&#125;</span> | grep <span class="string">'[0-9]\&#123;10,\&#125;'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"账号 <span class="variable">$&#123;USERNAME&#125;</span> 登录成功  <span class="variable">$&#123;msg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"未知消息 <span class="variable">$&#123;msg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有参数时获取参数</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">getopts</span> :qu:p:f: OPTION</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$OPTION</span> <span class="keyword">in</span></span><br><span class="line">            q) VERBOSE=<span class="string">'n'</span> ;;</span><br><span class="line">            u) USERNAME=<span class="variable">$OPTARG</span> ;;</span><br><span class="line">            p) PASSWORD=<span class="variable">$OPTARG</span> ;;</span><br><span class="line">            f) USERSFILE=<span class="variable">$OPTARG</span> ;;</span><br><span class="line">            \?) usage ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">shift</span> $((<span class="variable">$OPTIND</span> - 1)) <span class="comment"># 如果这一句话出错, 注释掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果登录</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ] || [[ <span class="variable">$1</span> == <span class="string">'login'</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果账号密码为空，则从文件里读取</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;USERNAME&#125;</span> == <span class="string">''</span> ]] || [[ <span class="variable">$&#123;PASSWORD&#125;</span> == <span class="string">''</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">read</span> l1; <span class="keyword">do</span></span><br><span class="line">            USERNAME=`<span class="built_in">echo</span> -n <span class="variable">$l1</span> | awk <span class="string">'&#123; print $1 &#125;'</span>`</span><br><span class="line">            PASSWORD=`<span class="built_in">echo</span> -n <span class="variable">$l1</span> | awk <span class="string">'&#123; print $2 &#125;'</span>`</span><br><span class="line">            say_out <span class="string">"正在尝试登录 <span class="variable">$&#123;USERNAME&#125;</span> <span class="variable">$&#123;PASSWORD&#125;</span>"</span></span><br><span class="line">            PASSWORD=`md5_hash <span class="variable">$&#123;PASSWORD&#125;</span>`</span><br><span class="line">            <span class="comment"># 如果登录成功，则退出循环，并记录账号密码</span></span><br><span class="line">            state=`submit <span class="string">'do_login'</span> <span class="variable">$&#123;USERNAME&#125;</span> <span class="variable">$&#123;PASSWORD&#125;</span>`</span><br><span class="line">            say_out <span class="string">"state: <span class="variable">$&#123;state&#125;</span>"</span></span><br><span class="line">            <span class="keyword">if</span> [[ `<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;state&#125;</span>"</span> | grep <span class="string">'成功'</span>` ]]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;USERNAME&#125;</span> 登录成功"</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;USERNAME&#125;</span> <span class="variable">$&#123;PASSWORD&#125;</span>"</span> &gt; <span class="variable">$&#123;STATEFILE&#125;</span></span><br><span class="line">                <span class="built_in">exit</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span> &lt; <span class="variable">$&#123;USERSFILE&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"所有账号登录失败"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        say_out <span class="string">"正在尝试登录 <span class="variable">$&#123;USERNAME&#125;</span> <span class="variable">$&#123;PASSWORD&#125;</span>"</span></span><br><span class="line">        PASSWORD=`md5_hash <span class="variable">$&#123;PASSWORD&#125;</span>`</span><br><span class="line">        submit <span class="string">'do_login'</span> <span class="variable">$&#123;USERNAME&#125;</span> <span class="variable">$&#123;PASSWORD&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 如果注销</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$1</span> == <span class="string">'logout'</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果账号密码为空，则从文件里读取</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;USERNAME&#125;</span> == <span class="string">''</span> ]] || [[ <span class="variable">$&#123;PASSWORD&#125;</span> == <span class="string">''</span> ]]; <span class="keyword">then</span></span><br><span class="line">        USERNAME=`cat <span class="variable">$&#123;STATEFILE&#125;</span> | awk <span class="string">'&#123; print $1 &#125;'</span>`</span><br><span class="line">        PASSWORD=`cat <span class="variable">$&#123;STATEFILE&#125;</span> | awk <span class="string">'&#123; print $2 &#125;'</span>`</span><br><span class="line">        say_out <span class="string">"正在尝试注销 <span class="variable">$&#123;USERNAME&#125;</span> <span class="variable">$&#123;PASSWORD&#125;</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    submit <span class="string">'force_logout'</span> <span class="variable">$&#123;USERNAME&#125;</span> <span class="variable">$&#123;PASSWORD&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    usage</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>最后<code>:wq</code>退出</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x auth.sh</span><br><span class="line">touch state.txt</span><br><span class="line">touch users.txt</span><br></pre></td></tr></table></figure><p>配置好了</p><p>运行<code>./auth.sh</code> 就可以登录, <code>./auth.sh logout</code> 就可以注销</p><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>经过一段时间的测试, 发现每天早上7点钟, 网络连接就会被断开, 猜测是服务器断开了所有会话, 所以需要启用定时任务来重新连接.</p><p>使用<code>crontab</code>命令进行定时重新登录, 不过重新登录的时间点上, 不建议直接选择7点整, 因为可能造成冲突, 我这里选择在7:10时进行更新.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e &#123;username&#125;</span><br></pre></td></tr></table></figure><p>然后写入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10 7 * * * /jffs/srunauth/auth.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>保存退出</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚入学, 发现校园网是使用 srun 3000 进行认证, 可以使用客户端或或者网页认证. 可是无论是客户端还是网页, 登录之后都有一个不能关闭的窗口, 一旦关闭就断开网络, &lt;del&gt;虽然可以丢到一个新建的桌面, 眼不见心不烦&lt;/del&gt;, 这是不能忍的.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="宽带症候群" scheme="http://blog.sorcererxw.com/tags/%E5%AE%BD%E5%B8%A6%E7%97%87%E5%80%99%E7%BE%A4/"/>
    
      <category term="浙江大学软件学院" scheme="http://blog.sorcererxw.com/tags/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E8%BD%AF%E4%BB%B6%E5%AD%A6%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>又双叒叕迁移博客</title>
    <link href="http://blog.sorcererxw.com/2018/09/09/migrate-blog-again/"/>
    <id>http://blog.sorcererxw.com/2018/09/09/migrate-blog-again/</id>
    <published>2018-09-09T00:00:00.000Z</published>
    <updated>2018-09-11T14:18:23.359Z</updated>
    
    <content type="html"><![CDATA[<p>一个月前把 blog 迁移到了自建的 wordpress 上, 开始非常喜欢, 毕竟图形化的面板, 快捷安装插件和主题, 太方便了. 但是经历了几次 mysql 数据库停止后就后悔了, 依赖于外部数据库, 一旦发生问题, 网站就无法访问了, 太不省心了.</p><p>这是试试, 那个试试, 兜兜转转最后还是回到了起点, 捡起了 hexo, 还是静态博客省心呀!</p><a id="more"></a><p><img src="http://i0.hdslb.com/bfs/archive/33456db59952d1468fd6e44c38df71bf1400fa26.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个月前把 blog 迁移到了自建的 wordpress 上, 开始非常喜欢, 毕竟图形化的面板, 快捷安装插件和主题, 太方便了. 但是经历了几次 mysql 数据库停止后就后悔了, 依赖于外部数据库, 一旦发生问题, 网站就无法访问了, 太不省心了.&lt;/p&gt;
&lt;p&gt;这是试试, 那个试试, 兜兜转转最后还是回到了起点, 捡起了 hexo, 还是静态博客省心呀!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx 反向代理配置 Github Page 的 api 网关</title>
    <link href="http://blog.sorcererxw.com/2018/08/10/nginx-reverse-proxy-github-page-api-gateway/"/>
    <id>http://blog.sorcererxw.com/2018/08/10/nginx-reverse-proxy-github-page-api-gateway/</id>
    <published>2018-08-10T00:12:47.000Z</published>
    <updated>2018-09-08T21:33:19.122Z</updated>
    
    <content type="html"><![CDATA[<p>将 web app 部署在 Github Pages (以下简称 gp) 非常方便优雅, 但是会面临一个问题, 就是<strong>访问接口的跨域问题</strong>.</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>通常, 我们直接将域名解析到 nginx 服务器, 再通过 nginx 反向代理, 将前端的 api 路径代理到 api 服务器上.<br>另一方面, 如果将项目部署在 gp 上面, 我们就需要将域名直接解析到 gp 服务器上.<br>这么一来, 两者就发生了冲突, 需要进行一些额外的配置.<br>那么, 我们索性将域名直接解析给 nginx, 然后通过 nginx 来将前端代理到 gp, api 代理到后端. 不过这么一来, 就没有遵循 gp 的配置规则, 无法启用 gp 的 enforce https 的功能, 不过这个跳转环节可以直接放在 nginx 上实现.</p><a id="more"></a><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先需要准备一台服务器, 然后安装启用 nginx, 将自己的所需要为前端配置的域名  <code>example.com</code> 解析到这台服务器上.<br>另外, 还需要配置好后端服务器, 并做好域名解析, 比如 <code>api.example.com</code></p><h2 id="部署-gh"><a href="#部署-gh" class="headerlink" title="部署 gh"></a>部署 gh</h2><p>参考 <a href="https://blog.sorcererxw.com/2018/08/09/deploy-github-pags/">我之前的文章</a> 来部署好 gh, 并在自定义域名栏目里面填入 <code>example.com</code>, 由于解析地址的时候并没有解析到 gh, 所以看到 Enforce Https 无法勾选, 而且现在也无法进行访问.<br><img src="https://wx2.sinaimg.cn/mw690/86dfa6f4gy1fu4djg8ub3j20sc0m0gnn.jpg" alt="img"></p><h2 id="配置-nginx-反向代理"><a href="#配置-nginx-反向代理" class="headerlink" title="配置 nginx 反向代理"></a>配置 nginx 反向代理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com; # 填上自己的域名</span><br><span class="line">    location /api &#123; # 配置前端 api 的路径</span><br><span class="line">        proxy_pass https://api.example.com/; # 填上要转发的 api 服务器地址</span><br><span class="line">        # 这里有一个需要注意的地方如果填的是 https://api.xxxx.com (末尾无斜杠)</span><br><span class="line">        # 那么, 当前端访问 xxxx.com/api/target 时</span><br><span class="line">        # nginx 会将请求转发到 https://api.xxxx.com/api/target</span><br><span class="line">        # 而如果填的是 https://api.xxxx.com/</span><br><span class="line">        # 那么, 当前端访问 xxxx.com/api/target 时</span><br><span class="line">        # nginx 会将请求转发到 https://api.xxxx.com/target  </span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header host $host;</span><br><span class="line">        proxy_set_header x-real-ip $remote_addr;</span><br><span class="line">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass https://example.github.io;</span><br><span class="line"># 填上你的 gp 的二级域名, 比如我的是 sorcererxw.github.io</span><br><span class="line">    &#125;</span><br><span class="line">    access_log /var/log/nginx/sorcererxw.com_access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了, 然后重载一下 nginx<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p><p>这个时候, 如果你访问 example.com 应该是可以访问了, 也能够在前端直接访问 api 接口.<br>原理就是, 虽然是直接将前端流量转发到 example.github.io, 但是通过当前地址栏当中的域名, gh 会显示为对应的前端页面.</p><h2 id="配置-Https-跳转"><a href="#配置-Https-跳转" class="headerlink" title="配置 Https 跳转"></a>配置 Https 跳转</h2><p>最方便的办法就是直接使用 letsencrypt 的 certbot 进行配置<br>根据 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a> 来进行安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certbot --nginx</span><br></pre></td></tr></table></figure></p><p>记得选上 redirect https 即可.<br>当然, 如果有条件购买证书, 更加推荐使用.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将 web app 部署在 Github Pages (以下简称 gp) 非常方便优雅, 但是会面临一个问题, 就是&lt;strong&gt;访问接口的跨域问题&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h1&gt;&lt;p&gt;通常, 我们直接将域名解析到 nginx 服务器, 再通过 nginx 反向代理, 将前端的 api 路径代理到 api 服务器上.&lt;br&gt;另一方面, 如果将项目部署在 gp 上面, 我们就需要将域名直接解析到 gp 服务器上.&lt;br&gt;这么一来, 两者就发生了冲突, 需要进行一些额外的配置.&lt;br&gt;那么, 我们索性将域名直接解析给 nginx, 然后通过 nginx 来将前端代理到 gp, api 代理到后端. 不过这么一来, 就没有遵循 gp 的配置规则, 无法启用 gp 的 enforce https 的功能, 不过这个跳转环节可以直接放在 nginx 上实现.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次 GitHub Pages 部署</title>
    <link href="http://blog.sorcererxw.com/2018/08/09/deploy-github-pags/"/>
    <id>http://blog.sorcererxw.com/2018/08/09/deploy-github-pags/</id>
    <published>2018-08-09T00:12:47.000Z</published>
    <updated>2018-09-10T11:57:11.134Z</updated>
    
    <content type="html"><![CDATA[<p>之前买了一个域名 <a href="https://ilove.works" target="_blank" rel="noopener">ilove.works</a>，用 React 写了一个小玩具。本来打算放在自己的服务器里面，但是想想这只是一个小玩具，放在自己服务器里面只会让未来的维护成本上升。好吧，那就放在 GitHub Pages 上吧。毕竟 React 官方的 create-react-app 能够搭配 gh-pages 非常舒服地进行部署。</p><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>之前只使用 pages 部署过个人主页，没有部署过独立地项目主页。整个过程参考了<a href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#github-pages" target="_blank" rel="noopener">create-react-app 文档</a>，但是还是踩了一些坑，复盘记录一下步骤。</p><h2 id="集成-gh-pages"><a href="#集成-gh-pages" class="headerlink" title="集成 gh-pages"></a>集成 gh-pages</h2><p>写完代码，本地测试完毕，准备部署了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gh-pages</span><br></pre></td></tr></table></figure></p><p>并在 <code>packages.json</code> 的 <code>scripts</code> 节点当中添加两句命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">+   &quot;predeploy&quot;: &quot;npm run build&quot;,</span><br><span class="line">+   &quot;deploy&quot;: &quot;gh-pages -d build&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>部署的时候只需要直接执行 <code>deploy</code> 命令，<code>predeploy</code> 会在不部署前被自动调用执行的。</p><h2 id="配置主页地址"><a href="#配置主页地址" class="headerlink" title="配置主页地址"></a>配置主页地址</h2><p>在 <code>packages.json</code> 根节点当中添加一行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;https:/example.github.io/&quot;,</span><br></pre></td></tr></table></figure></p><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>这里和文档当中不一样，文档当中是添加 <code>&quot;homepage&quot;: &quot;https:/example.github.io/app&quot;</code>，如果根据文档上的部署，的确能够正确地将项目部署上去，访问地址就是 <code>example.github.io/app</code>，但是如果之后再配置域名，访问地址也会是 <code>example.com/app</code>，而我们需要的是直接访问自定义域名，而不是其中一个子目录。<br>我折腾了半天才发现，因为在我配置完自定义域名后，打开自定义域名会一直显示资源文件404，只有手动在地址栏里面输入 ‘ilove.works/iloveworks’ 才可以访问，这显然很愚蠢。</p><h2 id="配置自定义域名"><a href="#配置自定义域名" class="headerlink" title="配置自定义域名"></a>配置自定义域名</h2><p>这很简单，直接根据 GitHub Pages 下面的说明，在设置里面填入你的域名或者手动把 CNAME 文件放在你的项目 public 目录下面。<br>然后需要把 DNS 解析到 GitHub Pages。常见的作法就是直接添加 A记录和 CNAME alias。我添加了 4 个 A 记录<br>185.199.108.153<br>185.199.109.153<br>185.199.110.153<br>185.199.111.153</p><p>可以正常访问了，但是 GitHub Pages 设置面板里面一直显示 <code>Unavailable for your site because your domain is not properly configured to support HTTPS</code>，即无法启用 GP 的 <code>enforce Https</code>，怎么会这样。Google 了一圈，都找不到合适的解释。<br>因为能够正常解析，所以我一直没有意识到是 DNS 的问题。但最终我发现确实是 DNS 的问题。因为我使用的 Cloudflare 的解析服务，但是 Cloudflare 会默认给域名套上 CDN，导致直接查询域名的主机地址是 Cloudflare 的 CDN 服务器，而不是 Github Pages。所以，Github 才认为我并没有配置好解析，也无法进行下一步。<br><img src="https://wx2.sinaimg.cn/mw690/86dfa6f4gy1ftjv23wahnj208206ujrh.jpg" alt="img"><br>解决方法很简单，单击那个云变成 <code>dns only</code> 即可。<br><img src="https://wx1.sinaimg.cn/mw690/86dfa6f4gy1ftjv3hdlyej20xh0csta8.jpg" alt="img"><br>当然，cloudflare 的这个功能这个能够保护主机真实地址，但是毕竟是放在 Github 的主机里面，也不用在乎这些了。</p><p>最后检查域名地址<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dig +noall +answer example.com</span><br><span class="line">;example.com.</span><br><span class="line">example.com.   3600  IN  A 185.199.108.153</span><br><span class="line">example.com.   3600  IN  A 185.199.109.153</span><br><span class="line">example.com.   3600  IN  A 185.199.110.153</span><br><span class="line">example.com.   3600  IN  A 185.199.111.153</span><br></pre></td></tr></table></figure></p><p>好了，一波配置之后，删除 Github Pages 上原来的自定义域名设置，然后重新添加一下。发现 Github 提示说要等待一段时间来进行证书申请。等几十分钟，就可以勾选 <code>enforce https</code> 了。</p><h2 id="最终的效果"><a href="#最终的效果" class="headerlink" title="最终的效果"></a>最终的效果</h2><p>访问 <code>ilove.works</code> 可以直接访问项目。<br>访问 <code>sorcererxw.github.io</code> 是自己的主页项目（如果没有就是404）<br>访问 <code>sorcererxw.github.io/iloveworks</code> 会自动跳转到 <code>ilove.works</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前买了一个域名 &lt;a href=&quot;https://ilove.works&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ilove.works&lt;/a&gt;，用 React 写了一个小玩具。本来打算放在自己的服务器里面，但是想想这只是一个小玩具，放在自己服务器里面只会让未来的维护成本上升。好吧，那就放在 GitHub Pages 上吧。毕竟 React 官方的 create-react-app 能够搭配 gh-pages 非常舒服地进行部署。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android「卡片中的列表」的实现探索</title>
    <link href="http://blog.sorcererxw.com/2016/11/25/android-cardify/"/>
    <id>http://blog.sorcererxw.com/2016/11/25/android-cardify/</id>
    <published>2016-11-25T00:12:47.000Z</published>
    <updated>2018-09-08T21:44:00.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>作为一个”MD癌”患者, 在自己开发的过程中怎么会不在意一些炫酷Material Design呢?</p><p>Material Design中最具代表性的一个设计元素要属Card. 所以我也非常喜欢将每一样元素放在一个又一个Card里面来呈现. 对于独立的元素, 这么做很好, 但是对于列表这样子的有大量元素的控件, 如果每一个普通列表项都用一个独立的Card包裹会稍显凌乱, 而且一定程度上违背Material Design初衷(用不同层级的元素来进行交互, 而不是单纯的呈现数据), 所以就会考虑把整个列表放到一个独立的Card中.</p><a id="more"></a><h1 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h1><p><a href="https://github.com/sorcererXW/CardList/tree/master/app/src/main/java/com/sorcererxw/demo/cardlist/planA" target="_blank" rel="noopener">代码</a></p><p>这是最最暴力的方法, 就是直接将一个RecyclerView外面套一个CardView, 这有一个巨大的缺陷就是CardView不会跟随RecyclerView滚动, 而是直接缩小到<code>min(RecyclerView.height, Screen.height)</code>了, 所以不推荐这个方案.</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://ofpmelh8h.bkt.clouddn.com/blog/20161125/173503531.png" alt="img"><br><img src="http://ofpmelh8h.bkt.clouddn.com/blog/20161125/173442223.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li style="list-style: none"><input type="checkbox" checked> 不会造成性能影响</li><li style="list-style: none"><input type="checkbox"> 卡片长度和列表长度一致(卡片跟随列表滚动)</li><li style="list-style: none"><input type="checkbox" checked> 卡片视觉效果</li><li style="list-style: none"><input type="checkbox" checked> 实现便捷</li></ul><h1 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h1><p><a href="https://github.com/sorcererXW/CardList/tree/master/app/src/main/java/com/sorcererxw/demo/cardlist/planB" target="_blank" rel="noopener">代码</a></p><p>想来想去是否可以在单个列表项中下手, 我们知道CardView有个特点, 就是如果两个贴合的CardView在Z轴上高度一致, 在显示上就会有”融合”的效果, 看不出两者之间的边界.</p><p>基于这个思路, 我尝试给在一个列表项外面套了一个CardView, 并且移除了每一项之间的间隔</p><p>但是这么一来, 为了不遮挡阴影, 必须给边缘的项设置margin, 中间的不需要设置margin, 这么一来, 整件事情就变得复杂了, <strong>对于一个单列的列表, 就有3种情况(上中下), 一个多列的列表甚至有8项(中间, 上边缘, 下边缘, 左边缘, 右边缘, 左上角, 右上角, 左下角, 右下角), 这还没考虑数据量较少的情况(比如只有一项, 那么同时包含上下的特点)</strong></p><p>为了不在代码中动态调整margin(会把代码逻辑弄得更复杂), 我决定通过定义更多的布局文件, 每种情况个一个布局.</p><p><img src="http://ofpmelh8h.bkt.clouddn.com/blog/20161125/174328104.png" alt="img"></p><p>由于是每一项单独处理, 当时表格的时候, 需要在获得数据后, 将数据数量补齐为表格列数的整数倍, 否则会出现以下情况</p><p><img src="http://ofpmelh8h.bkt.clouddn.com/blog/20161125/173058838.png" alt="img"></p><p>但是以上的问题都不是最关键的, 因为都只是导致代码更加复杂, 但是有一个致命的问题是, CardView的radius无法分不同角来调整, 也就是说, 如果我为了保证整块卡片区域没有空隙, 就必须把radius设置为0, 但是左上角, 左下角, 右上角, 右下角有事必须要有radius的, 否则, 没有圆角这就不叫卡片!</p><p>而且, 这样本来一个CardView就可以解决的事情, 被扩大为大量的CardView, 加上每一项的计算, 对性能有不小的影响, 滑动的时候会有, 明显的掉帧.</p><h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img src="https://ofpmelh8h.bkt.clouddn.com/blog/20161125/175553993.png" alt="img"><br><img src="https://ofpmelh8h.bkt.clouddn.com/blog/20161125/175608550.png" alt="img"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li style="list-style: none"><input type="checkbox"> 不会造成性能影响</li><li style="list-style: none"><input type="checkbox" checked> 卡片长度和列表长度一致(卡片跟随列表滚动)</li><li style="list-style: none"><input type="checkbox"> 卡片视觉效果</li><li style="list-style: none"><input type="checkbox"> 实现便捷<br>可以说和第一个方案走向了两个极端</li></ul><h1 id="方案2-1"><a href="#方案2-1" class="headerlink" title="方案2.1"></a>方案2.1</h1><p><a href="https://github.com/sorcererXW/CardList/tree/master/app/src/main/java/com/sorcererxw/demo/cardlist/planC" target="_blank" rel="noopener">代码</a><br>为了解决方案2的卡片无圆角的问题, 我找了一个开源库<a href="https://github.com/mthli/Slice" target="_blank" rel="noopener">Slice</a>, 这个库可以不依赖于CardView给View外套上一个Card, 而且这个Card可以选择哪个圆角显示, 哪个不显示, 哪一边有阴影, 哪一边无阴影, 非常实用.<br>这个方案具体我也不多说了, 逻辑上和方案2没有本质的区别, 也是实现麻烦, 性能欠缺, 具体可以去看一下代码.</p><h2 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h2><p><img src="https://ofpmelh8h.bkt.clouddn.com/blog/20161125/181255126.png" alt="img"><br><img src="https://ofpmelh8h.bkt.clouddn.com/blog/20161125/181315503.png" alt="img"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul><li style="list-style: none"><input type="checkbox"> 不会造成性能影响</li><li style="list-style: none"><input type="checkbox" checked> 卡片长度和列表长度一致(卡片跟随列表滚动)</li><li style="list-style: none"><input type="checkbox" checked> 卡片视觉效果</li><li style="list-style: none"><input type="checkbox"> 实现便捷</li></ul><h1 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h1><p><a href="https://github.com/sorcererXW/CardList/tree/master/app/src/main/java/com/sorcererxw/demo/cardlist/planD" target="_blank" rel="noopener">代码</a><br>过了很久, 不经意的看见一个开源应用, 应用内也有卡片列表, 似乎非常完美, 去github上看了一下, 惊讶地发现它居然只是将一个Recyclerview放在一个NestScrollView中, 就可以实现.<br>原谅我的无知, 我一直只把NestScrollView当做一个普通的ScrollView, 列表是不能放在其中使用的.</p><h2 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h2><p><img src="http://ofpmelh8h.bkt.clouddn.com/blog/20161125/184236230.png" alt="img"><br><img src="http://ofpmelh8h.bkt.clouddn.com/blog/20161125/184253688.png" alt="img"></p><p>但是问题在于, 这种实现方式对于列表来说, 就失去了Recycle机制了, 所有view会一口气全部绘制出来, 相当于一个linerlayout, 所以在小数据的时候问题不大, 如果数据量大的话, 会消耗大量的资源, 同样会照常卡顿</p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ul><li style="list-style: none"><input type="checkbox"> 不会造成性能影响</li><li style="list-style: none"><input type="checkbox" checked> 卡片长度和列表长度一致(卡片跟随列表滚动)</li><li style="list-style: none"><input type="checkbox" checked> 卡片视觉效果</li><li style="list-style: none"><input type="checkbox" checked> 实现便捷</li></ul><h1 id="个人使用经验"><a href="#个人使用经验" class="headerlink" title="个人使用经验"></a>个人使用经验</h1><p>我自己的项目<a href="https://github.com/sorcererXW/SorceryIconPack" target="_blank" rel="noopener">Sorcery图标包</a>中, 我将一组的图标放在同一张卡片中, 同时每一组还有一个header</p><p>我尝试过方案三, 但是问题在于, 每一页图标少则十几个, 多则上千个, 这样大的数据会造成非常严重的卡顿</p><p>为了更好的滑动体验, 我选择了逻辑更加复杂的方案二, 虽然在实现的过程我恶心得要死, 但是最后的效果还是非常不错的</p><p><img src="http://ofpmelh8h.bkt.clouddn.com/blog/20170123/112609829.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;作为一个”MD癌”患者, 在自己开发的过程中怎么会不在意一些炫酷Material Design呢?&lt;/p&gt;
&lt;p&gt;Material Design中最具代表性的一个设计元素要属Card. 所以我也非常喜欢将每一样元素放在一个又一个Card里面来呈现. 对于独立的元素, 这么做很好, 但是对于列表这样子的有大量元素的控件, 如果每一个普通列表项都用一个独立的Card包裹会稍显凌乱, 而且一定程度上违背Material Design初衷(用不同层级的元素来进行交互, 而不是单纯的呈现数据), 所以就会考虑把整个列表放到一个独立的Card中.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RxActivityResult 原理浅析</title>
    <link href="http://blog.sorcererxw.com/2016/11/16/how-rxactivityresult-work/"/>
    <id>http://blog.sorcererxw.com/2016/11/16/how-rxactivityresult-work/</id>
    <published>2016-11-16T00:12:47.000Z</published>
    <updated>2018-09-21T05:01:13.153Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为刚学RxJava不久, 一直在使用一些基于RxJava的第三方扩展库, 觉得非常神奇, 特别是一些库能够直接代理Activity进行数据处理, 但是因为懒, 一直也没了解其中的原理.</p><p>不过最近使用<a href="https://github.com/VictorAlbertos/RxActivityResult" target="_blank" rel="noopener">RxActivityResult</a>, 发现有些小地方用得不是特别顺心, 提了issues, 作者也没给个满意的答复, 索性fork了一遍, clone下来试着自己改一下, 顺便读一遍源码.</p></blockquote><a id="more"></a><p>先声明一下, 以下内容仅仅包含RxActivityResult 的基本原理与被我精简过的源码, 具体内容可以自己去<a href="https://github.com/VictorAlbertos/RxActivityResult" target="_blank" rel="noopener">RxActivityResult</a>中看源码.</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>先提一下RxActivityResult 的基本使用方法, 方便在稍后分析中验证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RxActivityResult.on(mActivityA)</span><br><span class="line">        .startIntent(<span class="keyword">new</span> Intent(mActivityA, ActivityB.class)</span><br><span class="line">                .addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION) <span class="comment">/*移除Activity启动时的动画*/</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Result&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (result.getData() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    result.data().getIntExtra(<span class="string">"key"</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>简简单单的一步就实现的startActivityForResult() 的整个流程</p><h1 id="流程与原理"><a href="#流程与原理" class="headerlink" title="流程与原理"></a>流程与原理</h1><p>RxActivityResult 通过启动一个代理Activity–<code>HolderActivity</code>来作为两个Activity 之间数据交互的桥梁, 先在Activity A告诉RxActivityResult 所需要启动的目标Activity, 然后RxActivityResult 代为启动HolderActivity, HolderActivity 启动Activity B, 然后接受Activity B 传回的result, 然后通过回调方法</p><p><img src="https://imgur.com/bgjf1M1.png" alt="img"></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>先放上三个基础的类, 会在后面被多次使用到</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 最终返回给调用者的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T mActivity;</span><br><span class="line">    <span class="keyword">int</span> mResultCode;</span><br><span class="line">    Intent mData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 提供给HolderActivity 在获取到数据后来调用的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OnResult</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">(<span class="keyword">int</span> resultCode, @Nullable Intent data)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 打包了启动B Activity 的intent 和回调接口的类</span></span><br><span class="line"><span class="comment"> * 到时候会中启动HolderActivity 之前保存到HolderActivity 当中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    Intent mIntent;</span><br><span class="line">    OnResult mOnResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxActivityResult</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ActivitiesLifecycleCallbacks 和整个流程关系不大, 用处就是注册中application 中,</span></span><br><span class="line">    <span class="comment">// 来获得当前应用的最顶层 Activity, 感兴趣的可以在后面看到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ActivitiesLifecycleCallbacks mActivitiesLifecycleCallbacks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> Application application)</span> </span>&#123;</span><br><span class="line">        mActivitiesLifecycleCallbacks = <span class="keyword">new</span> ActivitiesLifecycleCallbacks(application);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取一个RxActivityResult的Builder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Activity&gt; <span class="function">Builder&lt;T&gt; <span class="title">on</span><span class="params">(T activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RxActivityResult核心</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Activity</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Class mClass;</span><br><span class="line">        <span class="comment">// 一个Subject, 用于提供给外界订阅</span></span><br><span class="line">        <span class="keyword">final</span> PublishSubject&lt;Result&lt;T&gt;&gt; mSubject = PublishSubject.create();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(T activity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mActivitiesLifecycleCallbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"not registered"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mClass = activity.getClass();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供给外界来启动intent, 本质上是将intent 打包在Request 当中,</span></span><br><span class="line">        <span class="comment">// 启动HolderActivity 并将Request 提供给HolderActivity</span></span><br><span class="line">        <span class="keyword">public</span> Observable&lt;Result&lt;T&gt;&gt; startIntent(Intent intent) &#123;</span><br><span class="line">            <span class="keyword">return</span> startHolderActivity(<span class="keyword">new</span> Request(intent));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Observable&lt;Result&lt;T&gt;&gt; startHolderActivity(Request request) &#123;</span><br><span class="line">            request.setOnResult(mOnResultActivity);</span><br><span class="line">            HolderActivity.setRequest(request);</span><br><span class="line">            mActivitiesLifecycleCallbacks.getLiveActivity() <span class="comment">// 获取当前应用顶层的Activity</span></span><br><span class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Activity&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">                        activity.startActivity(<span class="keyword">new</span> Intent(activity, HolderActivity.class)</span><br><span class="line">                                .addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> mSubject.asObservable();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一个回调接口, 当HolderActivity 接受到数据后会调用这个接口</span></span><br><span class="line">        <span class="keyword">private</span> OnResult mOnResultActivity = <span class="keyword">new</span> OnResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">(<span class="keyword">int</span> resultCode, @Nullable Intent data)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (mActivitiesLifecycleCallbacks.getLiveActivityOrNull() == <span class="keyword">null</span></span><br><span class="line">                        || mActivitiesLifecycleCallbacks.getLiveActivityOrNull()</span><br><span class="line">                        .getClass() != mClass) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Activity activity = mActivitiesLifecycleCallbacks.getLiveActivityOrNull();</span><br><span class="line">                <span class="comment">// 通知subject 的订阅者, 将Activity Result 传递过去</span></span><br><span class="line">                mSubject.onNext(<span class="keyword">new</span> Result&lt;&gt;((T) activity, resultCode, data));</span><br><span class="line">                <span class="comment">// subject 的使命已完成, 同时这一次RxActivityResult 的流程结束</span></span><br><span class="line">                mSubject.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * HolderActivity, 作为中间的桥梁来传递数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Request mRequest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被 A Activity调用, 用于存储回调</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        mRequest = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mResultCode;</span><br><span class="line">    <span class="keyword">private</span> Intent mData;</span><br><span class="line">    <span class="keyword">private</span> OnResult mOnResult;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证回调是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (mRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mOnResult = mRequest.getOnResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保是第一次打开, 防止B Activity被多次打开</span></span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开B Activity</span></span><br><span class="line">        startActivityForResult(mRequest.getIntent(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收到结果, 直接关闭这个界面</span></span><br><span class="line">        mResultCode = resultCode;</span><br><span class="line">        mData = data;</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在被结束前执行回调方法</span></span><br><span class="line">        <span class="keyword">if</span> (mOnResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mOnResult.response(mResultCode, mData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivitiesLifecycleCallbacks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Application mApplication;</span><br><span class="line">    <span class="keyword">volatile</span> Activity mLiveActivityOrNull;</span><br><span class="line">    Application.ActivityLifecycleCallbacks mActivityLifecycleCallbacks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivitiesLifecycleCallbacks</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">        mApplication = application;</span><br><span class="line">        registerActivityLiftcycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerActivityLiftcycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityLifecycleCallbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mApplication.unregisterActivityLifecycleCallbacks(mActivityLifecycleCallbacks);</span><br><span class="line">        &#125;</span><br><span class="line">        mActivityLifecycleCallbacks = <span class="keyword">new</span> SimpleActivityLifecycleCallbacks() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Activity activity, Bundle bundle)</span> </span>&#123;</span><br><span class="line">                mLiveActivityOrNull = activity;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResumed</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">                mLiveActivityOrNull = activity;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPaused</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">                mLiveActivityOrNull = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        mApplication.registerActivityLifecycleCallbacks(mActivityLifecycleCallbacks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Activity <span class="title">getLiveActivityOrNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mLiveActivityOrNull;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> mEmitted = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Observable&lt;Activity&gt; <span class="title">getLiveActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mEmitted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> Observable.interval(<span class="number">50</span>, <span class="number">50</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                .map(<span class="keyword">new</span> Func1&lt;Long, Activity&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Activity <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> mLiveActivityOrNull;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .takeWhile(<span class="keyword">new</span> Func1&lt;Activity, Boolean&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">boolean</span> continueEmitting = !mEmitted;</span><br><span class="line">                        mEmitted = activity != <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">return</span> continueEmitting;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .filter(<span class="keyword">new</span> Func1&lt;Activity, Boolean&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> activity != <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>其实分析下来, 发现并没有特别深奥, 就是一开始理解的时候不是很容易理顺其中的逻辑.</p><p>类似的库还有<a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="noopener">RxPermissions</a>, 一个使用RxJava来简化Android 6.0+系统中权限申请的流程, 应该也是通过启动一个透明的中间Activity 并在这个Activity 中申请权限, 得到申请结果后, 然后通过回调告诉订阅者, 具体代码暂时不分析了, 可以去源码库中查看.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为刚学RxJava不久, 一直在使用一些基于RxJava的第三方扩展库, 觉得非常神奇, 特别是一些库能够直接代理Activity进行数据处理, 但是因为懒, 一直也没了解其中的原理.&lt;/p&gt;
&lt;p&gt;不过最近使用&lt;a href=&quot;https://github.com/VictorAlbertos/RxActivityResult&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RxActivityResult&lt;/a&gt;, 发现有些小地方用得不是特别顺心, 提了issues, 作者也没给个满意的答复, 索性fork了一遍, clone下来试着自己改一下, 顺便读一遍源码.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RecyclerView 当中 item 无法 match 解决方案</title>
    <link href="http://blog.sorcererxw.com/2015/12/29/recyclerview-item-match-solution/"/>
    <id>http://blog.sorcererxw.com/2015/12/29/recyclerview-item-match-solution/</id>
    <published>2015-12-29T00:12:47.000Z</published>
    <updated>2018-09-08T05:57:48.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>直接上解决方案, 后面作解释<br>在<code>Adapter</code>当中进行<code>inflat</code>的时候为view添加<code>parent view</code><br>如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pulic <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="title">extend</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mDates;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView mParent;</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context, List&lt;String&gt; data, RecyclerView parent)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mDates = dates;</span><br><span class="line">        mParent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item, mParent, <span class="keyword">false</span>);</span><br><span class="line">        ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>这段代码当中的关键语句是<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">View view = LayoutInflater.from(mContext).inflate(R.layout.item, mParent, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><p>添加<code>parent</code>参数是为让<code>inflater</code>获取所需的<code>layoutparams</code>, 从而保证item符合父容器的布局<br>最后一个参数是<code>attachToRoot</code>是不让item成为父容器的root</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h1&gt;&lt;p&gt;直接上解决方案, 后面作解释&lt;br&gt;在&lt;code&gt;Adapter&lt;/code&gt;当中进行&lt;code&gt;inflat&lt;/code&gt;的时候为view
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Root Android Without Recovery &amp; Replace Kingroot</title>
    <link href="http://blog.sorcererxw.com/2015/12/21/root-android-without-recovery-replace-kingroot/"/>
    <id>http://blog.sorcererxw.com/2015/12/21/root-android-without-recovery-replace-kingroot/</id>
    <published>2015-12-21T00:12:47.000Z</published>
    <updated>2018-09-13T12:44:14.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h1><p>安装以下软件</p><ol><li><a href="http://www.coolapk.com/apk/com.kingroot.kinguser" target="_blank" rel="noopener">Kingroot</a></li><li><a href="http://www.coolapk.com/apk/jackpal.androidterm" target="_blank" rel="noopener">Android Terminal Emulator</a></li></ol><p>下载<a href="http://www.mediafire.com/download/mxzbt42xypvn2ts/Replace_Kinguser_with_SuperSU-v2.4.zip" target="_blank" rel="noopener">压缩包</a></p><h1 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h1><p>启动kingroot进行root<br>如果失败则此方法无效, 绕道另寻他法</p><h1 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h1><p>将下载的压缩包解压, 将解压出来的mrw文件放到手机sdcard目录(storage/emulated/0/)中</p><h1 id="step-4"><a href="#step-4" class="headerlink" title="step 4"></a>step 4</h1><p>启动android terminal emulator<br>输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure></p><p>kingroot会弹出询问是否给予超级权限, 确定<br>再输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh /sdcard/mrw/root.sh</span><br></pre></td></tr></table></figure></p><p>接下来会出现很多输出, 可能有些会显示error, 但是没关系<br>最后会自动跳转到Supersu目录下, Supersu询问询问是够更新二进制文件, 选择normal, 重启<br>启动好之后会发现手机当中的Kingroot已经消失, 取而代之的是Supersu</p><p>最后附上<a href="https://www.youtube.com/watch?v=x6IgvVRt3ak" target="_blank" rel="noopener">youtube视频演示</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;step-1&quot;&gt;&lt;a href=&quot;#step-1&quot; class=&quot;headerlink&quot; title=&quot;step 1&quot;&gt;&lt;/a&gt;step 1&lt;/h1&gt;&lt;p&gt;安装以下软件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coolapk.com/ap
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xposed 开发指南 (翻译)</title>
    <link href="http://blog.sorcererxw.com/2015/09/13/xposed-dev-guide/"/>
    <id>http://blog.sorcererxw.com/2015/09/13/xposed-dev-guide/</id>
    <published>2015-09-13T00:12:47.000Z</published>
    <updated>2018-09-11T09:51:16.863Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>声明</strong>: 原创, 翻译自rovo89的官方<a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial" target="_blank" rel="noopener">Development tutorial</a><br>已全部翻译, 待修改 | 最后修改于: 2015年9月16日<br>水平有限, 仅供参考.</p></blockquote><p>好了…你应该是想要学习如何创建一个全新的Xposed模块吧? 阅读这篇指南(或者说是”扩展教程”)来学习吧. 这篇文章包含但不限于”教程”, 还包括关于这件事背后的思考. 这样子的思考 会让你认识到你创造的东西的价值, 并且理解你在干什么和为什么要这么干. 如果你觉得文章太长了, 读不下, 你可以只看最后的源代码部分<code>Making the project an Xposed module</code>. 但是你如果读完了整篇文章你会获得更好的理解. 你会省下到时候回头来读的时间, 因为你如果读完了整篇文章, 你就没必要去亲自去理解每个细节.</p><a id="more"></a><h1 id="一个修改系统的项目"><a href="#一个修改系统的项目" class="headerlink" title="一个修改系统的项目"></a>一个修改系统的项目</h1><p>你可以在<a href="https://github.com/rovo89/XposedExamples/tree/master/RedClock" target="_blank" rel="noopener">Github</a>上找到一个创建红色时钟的样例. 这个样例修改状态栏上面时钟为红色并且添加了一个笑脸. 我选择这个样例是因为这个样例足够的小, 并且很容易获得可见的效果. 另外, 这个样例使用了一些Xposed框架中的一些基本的方法.</p><h1 id="Xposed的工作原理"><a href="#Xposed的工作原理" class="headerlink" title="Xposed的工作原理"></a>Xposed的工作原理</h1><p>在开始你对你的系统大动干戈之前, 你应该对Xposed是如何工作的有一个最基本的概念(你可以跳过这个章节, 如果你觉得很无聊).<br>首先, 系统里面有一个叫作”Zygote”的进程. 这是Android运作的核心. 每一个程序都是作为这个进程的副本(“fork”)来打开的. 这个进程会被一个叫作<code>/init.rc</code>的脚本在开机的时候打开. 这个进程被放在<code>/system/bin/app_process</code>中, 用于在加载系统所必须的类和调用初始化方法.<br>下面要介绍Xposed是从哪里闯进到你的系统里面的. 当你安装了这个框架, 一个<a href="https://github.com/rovo89/Xposed" target="_blank" rel="noopener">拓展的可执行应用进程</a>就被复制到了<code>/system/bin</code>当中. 这个进程通过在环境变量中加载额外的jar并从某些地方调用一些方法. 举个例子, Zygota的main方法被调用只是在VM被创建之后. 在这个方法里面, 是Zygota的用来在context执行的一部分.<br>这个jar被放在<code>/data/data/de.robv.android.xposed.installer/bin/XposedBridge.jar</code>中, 并且你可以在<a href="https://github.com/rovo89/XposedBridge" target="_blank" rel="noopener">这里</a>找到它的源代码. 打开<a href="https://github.com/rovo89/XposedBridge/blob/master/src/de/robv/android/xposed/XposedBridge.java" target="_blank" rel="noopener">XposedBridge</a>这个类, 看一下这个的main方法. 这个就是我写在上面的东西, 用来在手机刚启动非常早的时候被调用. 一些初始化方法会被执行, 还有一些模块会被加载(这个会在模块加载部分再说).</p><h2 id="hook和取代一个方法"><a href="#hook和取代一个方法" class="headerlink" title="hook和取代一个方法"></a>hook和取代一个方法</h2><p>那到底是什么东西让Xposed有如此强大的能力去”hook”调用一个方法. 当你通过反编译修改一个APK, 你可以直接插入或者修改你想要的指令. 然而, 你还要重新编译并签署这个APK, 并且还需要发布整个完整地APK. 通过Hook, 你可通过Xposed实现这个功能, 你不能修改一个应用内部的方法(因为几乎不可能去确定你到底需要什么样子的修改和放在什么位置). 但是你可以在一个方法前面或者后面注入你的代码, 这是最小的可以明确位置的Java单元.<br>XposedBridge拥有一个叫作<code>hookMethodNative</code>的私有原生方法. 这个方法被拓展的app_process实现. 会修改这个方法为”原生”并与这个方法的实现与系统原生的平常方法相连接. 这就意味着, 每一次这个被hook的方法将被调用, 这个平常的方法就会被取而代之地调用, 同时调用者并不知情. 在这个方法当中, <code>handleHookedMethod</code>会被调用, 并且将传输参数到这个方法,引用等当中. 而且这个方法会检测到已经在这个方法里面注册过的唤醒回调信号. 这样一来, 我们就可以修改当前方法调用的参数, 修改实例化的或者静态的变量, 唤醒其他方法, 根据返回的结果去干一些事情…当然也可跳过任何东西. 一切都显得非常灵活.<br>好了, 原理就讲到这儿. 现在让我们开始创建一个模块吧.</p><h1 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h1><p>一个模块就是一个普通的app, 只是有一些特殊的meta信息和文件. 所以, 先创建一个全新的Android项目. 我现在假设你已经在这之前做好了这件事. 如果没有, 在<a href="http://developer.android.com/sdk/installing.html" target="_blank" rel="noopener">官方文档</a>里面已经很细致地教你怎么做了. 至于SDK的问题, 我选择了4.0.3(API 15). 我建议你尝试也这么去做, 并且暂时不要轻易去尝试其他版本. 你不需要创建一个Activity, 因为修改系统不需要任何UI界面. 在我回答玩这个问题之后, 我想你应该已经有了一个空白的项目了吧.</p><h1 id="把这个项目Xposed化"><a href="#把这个项目Xposed化" class="headerlink" title="把这个项目Xposed化"></a>把这个项目Xposed化</h1><p>现在, 我们将这个项目转化成一个会被Xposed加载的模块吧. 会有一些必要的步骤.</p><h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><p>在Xposed Installer里面的模块列表会根据应用中是否包含特殊的meta信息标志来判断是否是Xposed模块. 你可以根据<code>AndroidManifest.xml =&gt; Application =&gt; Application Nodes (at the bottom) =&gt; Add =&gt; Meta Data</code>来实现. 标签的名字应该是<code>xposedmodule</code>并且相应的值应该是<code>true</code>. 然后保证这个项目其他资源是空的. 然后在<code>xposedminversion</code>和<code>xposeddescription</code>(关于你的模块的一个非常短小的描述)中重复同样的事情. XML文件应该看起来像这样:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"de.robv.android.xposed.mods.tutorial"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"15"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"xposedmodule"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"xposeddescription"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"Easy example which makes the status bar clock red and adds a smiley"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"xposedminversion"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="XposedBridgeApi-jar"><a href="#XposedBridgeApi-jar" class="headerlink" title="XposedBridgeApi.jar"></a>XposedBridgeApi.jar</h2><p>接下来, 你要让这个项目能够调用XposedBridge的API. 你可以从<a href="http://forum.xda-developers.com/xposed/xposed-api-changelog-t2714067" target="_blank" rel="noopener">XDA帖子</a>的一楼下载<code>XposedBridgeApi-&lt;version&gt;.jar</code>. 将这个jar复制到项目一个叫作<code>lib</code>的子目录, 然后右键这个文件并选择Build Path =&gt; Add to Build Path(Android Studio可以看我的<a href="http://sorcererxw.com/post/gong-ju/android-studiodao-ru-jarde-fang-fa" target="_blank" rel="noopener">文章</a>). 文件名当中的<code>&lt;version&gt;</code>就是你要作为<code>xposedminversion</code>插入manifest中的值.</p><blockquote><p>确保这个API类没有被包含在你编译出来的APK文件当中(仅仅去引用这个API). 否则, 你会遇到<code>IllegalAccessError</code>. 放在<code>libs</code>(注意是加`s`的)文件夹下面的文件会被Eclipse自动包含到APK当中, 所以不要将API文件放在这里面.</p></blockquote><h2 id="Module-implementation"><a href="#Module-implementation" class="headerlink" title="Module implementation"></a>Module implementation</h2><p>现在你可以为你的模块创建一个class. 我现在演示的class的名字叫作”Tutorial”并且包名是<code>de.robv.android.xposed.mods.tutorial</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> de.robv.android.xposed.mods.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutorial</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一步, 我们会执行一些Log输出去证明模块已经被加载了. 一个模块有多个入口, 至于要选择哪一个取决与你要修改什么东西. 你可以在任何时候让Xposed在你的模块中执行一些函数, 包括系统启动的时候, 一个新的app被加载的时候, 一个app的资源文件被初始化的时候等.<br>在这篇教程的后面, 你认识到一个特定的app需要一些必要的修改, 看看”let me know when a new app is loaded”中的入口. 所有入口都被IXposedMod的子接口标记. 在这个案例中, 你需要implement IXposedHookLoadPackage. 事实上这就是一个有一个参数的方法, 用于提供更多关于context信息给模块. 在我们的样例当中, 让我们Log输出那个正在加载的app的名字:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> de.robv.android.xposed.mods.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutorial</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        XposedBridge.log(<span class="string">"Loaded app: "</span> + lpparam.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个Log方法输出信息到stardard logcat(tag是<code>Xposed</code>)和/data/data/de.robv.android.xposed.installer/log/debug.log(一个可以通过Xposed Installer轻易访问的位置)当中.</p><h2 id="assets-xposed-init"><a href="#assets-xposed-init" class="headerlink" title="assets/xposed_init"></a>assets/xposed_init</h2><p>到此为止, 现在唯一还缺少的东西就是一个为XposedBridge准备的指示. 这件事可以通过一个叫<code>xposed_init</code>的文件来实现. 在<code>assets</code>文件夹下面创建一个新的名叫<code>xposed_init</code>的文本文件. 在这个文件中, 每一行都包含一个完全授权的类名. 在这个案例当中, 这个就是<code>de.robv.android.xposed.mods.tutorial.Tutorial</code>.</p><h1 id="试着运行一下"><a href="#试着运行一下" class="headerlink" title="试着运行一下"></a>试着运行一下</h1><p>保存你的文件. 然后编译并运行的你的Android应用. 这就是你第一次安装这个应用, 在使用之前, 你需要授权这个应用. 打开Xposed Installer的应用, 确保你已经安装了Xposed的框架. 然后切换到”Modules”页面. 你应该可以找到你的应用已经出现在这儿了. 勾选复选框来授权. 然后重启你的手机. 你不会在手机进程中看到什么不同, 但是当你观察控制台输出的Log信息, 你可以看到像这样的一些东西:</p><blockquote><p>Loading Xposed (for Zygote)…<br>Loading modules from /data/app/de.robv.android.xposed.mods.tutorial-1.apk<br>Loading class de.robv.android.xposed.mods.tutorial.Tutorial<br>Loaded app: com.android.systemui<br>Loaded app: com.android.settings<br>… (many more apps follow)</p></blockquote><p>恭喜你! 这个应用已经成功运行了. 你现在拥有了一个Xposed的模块. 这个可以变得更加有用, 而不只是输出Log信息…</p><h1 id="寻找你的目标并修改它"><a href="#寻找你的目标并修改它" class="headerlink" title="寻找你的目标并修改它"></a>寻找你的目标并修改它</h1><p>好了, 所以现在开始的部分会完全取决于你想要做什么, 同时也会各种各样. 如果你曾经修改过一个APK, 你大概知道现在要如何去思考. 总体来说, 你首先需要获取一些你的目标实现对象的内部细节. 在这个教程当中, 目标就是状态栏当中的时钟. 这个样例会帮助你去了解状态栏和其他SystemUI部分. 所以, 我们要开始一些搜索.<br>可能的一种方法: 反编译一下. 这会让你获得implementation的具体信息, 但是这会很难去阅读并理解, 因为你将会获得smali格式的代码.<br>可能的另一种方法: 获取AOSP源码(<a href="http://source.android.com/source/downloading.html" target="_blank" rel="noopener">这儿</a>或者<a href="http://grepcode.com/snapshot/repository.grepcode.com/java/ext/com.google.android/android/4.0.3_r1/" target="_blank" rel="noopener">这儿</a>), 这些会和你的ROM有很大的区别, 但是在这里面有相似甚至几乎相同的implementation. 我一般会先看AOSP来确定是否已经足够了. 如果我需要更多的细节, 我会去看实际反编译出来的代码.<br>你可以看看那个名字是或者当中包含”clock”的类. 其他东西是资源和布局文件. 如果你下载了官方的AOSP源代码, 你可以开始在frameworks/base/packages/SystemUI中找. 你会找到一些地方其中出现了”clock”. 这是普通并且确实是一个不寻常的方法去实现一个修改. 记住你现在”只能”去hook一个方法. 所以你需要找到一个合适的地方去插入一些代码以实现这一个神奇的过程. 这个地方可以是一个方法的前面和后面, 或者直接取代这个方法. 你要hook的方法越明确越好, 最好不是那些会被调用成千上百次的方法, 以避免对手机性能造成影响, 以及一些不可预期的负面影响.<br>在这个样例当中, 你可能发现res/layout/status_bar.xml包含了对com.android.systemui.statusbar.policy.Clock. Multiple中的自定义View的引用. 这个文字颜色是被通过一个textAppearance attribute被定义的, 所以修改颜色最轻便的方法就好似去修改这个apperance的定义. 然而, 并不能通过Xposed框架去修改系统style, 而且也不一定生效(这个在原生代码里面太深了). 替换整个状态栏layout文件似乎更有可能成功, 但是这样子可能会过度造成一些小变化. 相反地, 看看这个类吧. 有一个叫作updateClock的方法, 似乎是用来每过一分钟更新一次时间的:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateClock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mCalendar.setTimeInMillis(System.currentTimeMillis());</span><br><span class="line">    setText(getSmallTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个看上去简直就是完美的修改, 因为这个是非常明确的方法, 看上去只是用来修改时钟上文字的方法, 如我们在这个方法每一次被调用之后加一点东西就可以达到修改时钟文字和色彩的目的. 所以, 我们来试试:</p><blockquote><p>对于仅仅修改文字颜色, 这个明显是一个更好的方法. 也可以在(<a href="https://github.com/rovo89/XposedBridge/wiki/Replacing-resources" target="_blank" rel="noopener">替换资源文件</a>)看看一下”修改layout”</p></blockquote><h1 id="使用应用来寻找并hook方法"><a href="#使用应用来寻找并hook方法" class="headerlink" title="使用应用来寻找并hook方法"></a>使用应用来寻找并hook方法</h1><p>想象现在我们已经知道了什么? 我们在com.android.systemui.statusbar.policy.Clock中有了一个updateClock的方法并且我们准备去拦截这个方法. 我们在SystemUI资源中找到了这个类, 所以这个应该在SystemUI的进程当中起到一定的作用. 如果我们尝试从中去获取一些信息并在handleLoadPackage方法中直接应用这个类, 这样子没准会失败, 因为这个没准就是一个错误的进程. 所以, 当特定的包被加载, 我们先implement去执行一些代码.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.android.systemui"</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    XposedBridge.log(<span class="string">"we are in SystemUI!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过使用parameter, 我们可以轻易确认我是否在正确的包内. 一旦确认, 我们会尝试去接触包内一个叫作<code>ClassLoader</code>的类, 这个类是也是被这个变量引用的. 现在, 我们可以寻找com.android.systemui.statusbar.policy.Clock类以及其中的upclockClock方法, 告诉XposedBridge去hook:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> de.robv.android.xposed.mods.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutorial</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.android.systemui"</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        findAndHookMethod(<span class="string">"com.android.systemui.statusbar.policy.Clock"</span>, lpparam.classLoader, <span class="string">"updateClock"</span>, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// this will be called before the clock was updated by the original method</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// this will be called after the clock was updated by the original method</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>findAndHookMethod是一个<a href="https://github.com/rovo89/XposedBridge/wiki/Helpers" target="_blank" rel="noopener">helper</a>的函数. 记录静态的输入, 会自动添加如果你确认这个就是描述中的那个页面. 这个方法通过SystemUI中的ClassLoader查找Clock类. 然后在其中寻找updateClock方法. 如果有任何parameter指向这个方法, 之后你需要列出所有parameter的种类. 有多种方法去做这件事情, 但是我们的方法并不包含任何parameter, 让我们先跳过这个. 至于最后那个参数, 你需要去为implement XC_MethodHook类做准备.  为了让修改精简, 你可以使用匿名内部类. 如果你写了很多的代码, 最好去创建一个普通的类并将实例都写在这儿. 然后helper会帮助你做一切上面描述的用于hook的必要事情.<br>在XC_MethodHook方法当中, 有两个方法提供你去改写. 你可以选择都改写或者都不. 但是如果你都不改写, 等会儿将绝对看不到任何效果. 这些方法是<code>beforeHookedMethod</code>和<code>afterHookedMethod</code>. 不难猜测, 这两个分别会在原生方法前后执行. 你可以用”before”方法去评估或者篡改传给原生方法的参数(通过param.args), 甚至阻止对原生方法的调用(传输你的方法的结果). “after”方法可以用于干一些基于原生方法输出结果的事情. 你也可以在此时篡改结果. 当然, 你可以在原生方法调用前后添加你自己的代码.</p><blockquote><p>如果你想要完全取代原生方法, 可以看看<code>XC_MethodReplacement</code>这个子方法. 你只需要去重写这个方法.</p></blockquote><p>XposedBridge当中有一个列表, 用于记录每一个hook方法的注册回调方法. 那些都方法都有着最高的优先级(定义在hookMethod中), 会被优先调用. 这个原生方法总是最低的优先级. 所以, 如果你通过回调A(高优先级)和B(默认优先级)hook了一个方法, 那么无论何时被hook的方法被调用, 总是遵循这个流程: A.before -&gt; B.before -&gt; 原生方法 -&gt; B.after -&gt; A.after. 所以, A可以影响传到B的参数, 会更深一层修改这个参数在它们结束之前. 原生方法输出的结果会先被B处理, 但是A对于最终的结果会有最终话语权.</p><h1 id="最后一步-在方法调用前后执行你的代码"><a href="#最后一步-在方法调用前后执行你的代码" class="headerlink" title="最后一步: 在方法调用前后执行你的代码"></a>最后一步: 在方法调用前后执行你的代码</h1><p>好了, 现在你的这个方法根据会在每一次updateClock方法被调用的时候同时被调用了. 现在让我们来修改一些东西.<br>首先确认一下: 我确实已经引用了Clock对象? 是的, 已经存在于param.thisObject parameter中了. 所以, 如果这个方法被<code>myClock.ipdateClock()</code>调用, <code>param.thisObject</code>就是<code>myClock</code>.<br>接下去: 我们能对那个时钟干些什么? 这个Clock类现在并不能正常运行, 你不能直接将param.thisObject丢进去. 但是, 这个继承了TextView. 一旦你让这个Clock应用TextView, 你就可以使用setText, getText和setTextColor方法. 这个修改会被执行于原生设置新时间的方法后面. 在beforeHookedMethod(原生方法之前)中我们没什么事情可以做, 但是我们并不用去调用super方法.<br>来完成我们的代码:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> de.robv.android.xposed.mods.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutorial</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.android.systemui"</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        findAndHookMethod(<span class="string">"com.android.systemui.statusbar.policy.Clock"</span>, lpparam.classLoader, <span class="string">"updateClock"</span>, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                TextView tv = (TextView) param.thisObject;</span><br><span class="line">                String text = tv.getText().toString();</span><br><span class="line">                tv.setText(text + <span class="string">" :)"</span>);</span><br><span class="line">                tv.setTextColor(Color.RED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="笑看最后的结果"><a href="#笑看最后的结果" class="headerlink" title="笑看最后的结果"></a>笑看最后的结果</h1><p>现在再一次安装并启动的你的应用. 因为第一次安装时候, 你已经在Xposed Installer当中授权了这个应用, 你不需要再一次进行授权, 重启就够了. 然而, 你可能想要停止使用红色时钟, 只需要去取消授权即可. 如果原生和你修改模块都使用了默认的优先级, 那你也说不清哪个优先级更高(这个取决于handler方法的字符串代表, 并不依赖于模块).</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我也知道这个教程挺长的. 但是我希望你不只是实现一个绿色的时钟, 而是更多完全不一样的东西.如何找到好的方法去hook取决于你的经验, 所以要从简单的事情开始. 在一开始请尝试用Log在控制台输出, 以保证每一个地方都如你预期被调用. 另外, 衷心地祝福你在其中获得快乐.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;: 原创, 翻译自rovo89的官方&lt;a href=&quot;https://github.com/rovo89/XposedBridge/wiki/Development-tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Development tutorial&lt;/a&gt;&lt;br&gt;已全部翻译, 待修改 | 最后修改于: 2015年9月16日&lt;br&gt;水平有限, 仅供参考.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了…你应该是想要学习如何创建一个全新的Xposed模块吧? 阅读这篇指南(或者说是”扩展教程”)来学习吧. 这篇文章包含但不限于”教程”, 还包括关于这件事背后的思考. 这样子的思考 会让你认识到你创造的东西的价值, 并且理解你在干什么和为什么要这么干. 如果你觉得文章太长了, 读不下, 你可以只看最后的源代码部分&lt;code&gt;Making the project an Xposed module&lt;/code&gt;. 但是你如果读完了整篇文章你会获得更好的理解. 你会省下到时候回头来读的时间, 因为你如果读完了整篇文章, 你就没必要去亲自去理解每个细节.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些win10的使用经验</title>
    <link href="http://blog.sorcererxw.com/2015/08/10/win10-experience%20/"/>
    <id>http://blog.sorcererxw.com/2015/08/10/win10-experience /</id>
    <published>2015-08-10T00:12:47.000Z</published>
    <updated>2018-09-13T10:04:00.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高DPI显示"><a href="#高DPI显示" class="headerlink" title="高DPI显示"></a>高DPI显示</h1><p>由于win10使用了全新的渲染方式,不同于之前win7,win8的方式,所以会出现大量的软件出现界面模糊的现象.<br>观察发现大部分都是国产软件几乎全部阵亡,只有少数几个比如网易云音乐,微信之类良心产品存活下来,也有可能这些软件开始开发的时间比较晚,使用比较新框架.<br>国外软件大部分能够在高DPI下正常显示,不过steam,evernote会出现模糊现象.<br>其实是win10在高DPI下会强制将软件拉伸,使得界面拥有更好的可读性,但是并不是每一个软件都会适配高DPI,使得有些软件在拉伸之后变得模糊. ( 详细可以看 <a href="http://quan.ithome.com/0/000/731.htm" target="_blank" rel="noopener">『独家：详解Windows 10 DPI 技术』</a> )</p><p>与其抱怨软件厂商开发不与时俱进,还不如研究一下怎样获得更好的使用体验.</p><h2 id="使用兼容性设置"><a href="#使用兼容性设置" class="headerlink" title="使用兼容性设置"></a>使用兼容性设置</h2><p><img src="http://sorcerer.farbox.com/%E6%8A%98%E8%85%BE/_image/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/06-55-06.jpg" alt="img"><br>像是这样勾选兼容性选项卡里面的高DPI设置就可以实现让软件清晰显示,但是软件界面的会相应缩小.</p><h2 id="使用Windows10-DPI-FIX"><a href="#使用Windows10-DPI-FIX" class="headerlink" title="使用Windows10_DPI_FIX"></a>使用Windows10_DPI_FIX</h2><p><img src="http://sorcerer.farbox.com/%E6%8A%98%E8%85%BE/_image/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/07-07-14.jpg" alt="img"><br>这是一个国外用户开发的一个软件,可以让系统该用win8的渲染方式,让软件不被拉伸,打开选择Use Windows 8.1 DPI scaling,然后选择一个合适的比例,apply重启即可.<br>下载地址:<a href="http://pan.baidu.com/s/15AOhw" target="_blank" rel="noopener">http://pan.baidu.com/s/15AOhw</a></p><h1 id="一些可能有用的设置"><a href="#一些可能有用的设置" class="headerlink" title="一些可能有用的设置"></a>一些可能有用的设置</h1><h2 id="关于系统动画和特效"><a href="#关于系统动画和特效" class="headerlink" title="关于系统动画和特效"></a>关于系统动画和特效</h2><p><img src="http://sorcerer.farbox.com/%E6%8A%98%E8%85%BE/_image/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/08-52-13.jpg" alt="img"><br>如果电脑的性能有限已经喜欢朴素简洁的用户可以在『控制面板\系统和安全\系统\高级系统设置\性能设置』下把不需要的选项取消打勾,譬如我就不喜欢win10的窗口打开从任务栏图标缩放到窗口的动画,就把最后一项取勾了.<br>PS: 在我看来,win10使用扁平化本身就是返璞归真的一种表现,抛弃冗杂的动画是必须的,能够在一定程度上提高流畅度以及操作效率.</p><h2 id="库和此电脑的打开"><a href="#库和此电脑的打开" class="headerlink" title="库和此电脑的打开"></a>库和此电脑的打开</h2><p>从win7开始,微软就一直在推行模糊磁盘的概念,想要用库来替代文件资料管理,但是使用过后会发现库使用起来还是比较麻烦的,要将某个文件夹纳入库的管理并不比直接建立一个文件夹来得方便,也有可能是先入为主的原因,一直都用不惯库.<br>默认的桌面上是只有一个垃圾桶的,大部分图标都被固定在任务栏上面,这也是微软希望用任务栏进行任务管理,而不是把让图标把整个桌面占满的理念. 所以要打开此电脑(我的电脑)只能通过任务栏的资源管理器图标打开,默认是打开库的,但是为了遵循之前的使用习惯,我会将这个默认打开位置修改为此电脑.<br>只需要在<strong>此电脑</strong>的<strong>查看</strong>选项卡上的<strong>选项</strong>内将<strong>打开文件资源管理器是打开</strong>更改为<strong>此电脑即可</strong><br><img src="http://sorcerer.farbox.com/%E6%8A%98%E8%85%BE/_image/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/09-38-22.jpg" alt="img"></p><h1 id="关于cortana"><a href="#关于cortana" class="headerlink" title="关于cortana"></a>关于cortana</h1><p>进入win10桌面第一眼最明显能够感受得到的变化就是任务栏上多了一条灰灰的搜索框,这是微软在win10内集成的cortana,放在如此鲜艳的位置,可见微软对于这个智能助手是多么重视. 但是这么大的搜索框在我看来是并不美观的,而且占用了大量任务栏的空间,没有实际意义. 只需要右键搜索框,如下图设置即可将cortana变成一个图标,需要只需要点击图标.<br><img src="http://sorcerer.farbox.com/%E6%8A%98%E8%85%BE/_image/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/08-52-17.jpg" alt="img"><br>关于cortana的设置,在cortana内的笔记本标签下选择设置即可进入设置<br><img src="http://sorcerer.farbox.com/%E6%8A%98%E8%85%BE/_image/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/08-54-49.jpg" alt="img"><br>可以选择将cortana设置为一个小面团,感觉萌萌哒~<br><img src="http://sorcerer.farbox.com/%E6%8A%98%E8%85%BE/_image/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/08-55-56.jpg" alt="img"><br>最好玩的是可以设置让cortana直接响应”你好小娜”的语音,哪怕没有点开搜索框,说句话就可以开始调戏小娜,但是好玩归好玩,这个指令平时也很容易被误触发,没有人愿意在干正事的时候忽然跳出一个小娜说”我没有听清楚”,所以建议平时关闭了,需要小娜的时候直接ctrl+c进行呼出即可.</p><h1 id="关于Universal-Windows-App"><a href="#关于Universal-Windows-App" class="headerlink" title="关于Universal Windows App"></a>关于Universal Windows App</h1><p>这是微软在win10提出的一个新概念,通用应用(以下称为UWA). 使得平台可以通用一个应用,减少了用户使用体验的割裂感,降低了全平台软件开发成本.<br>由于UWA有标准的设计规范,已经更加完善的权限管理机制,使得软件也更加美观,也不会像国内软件一样耍流氓. 所以在条件允许的情况下我会尽量使用UWA.<br>由于应用商店内质量较高的软件还是比较少的,所有我推荐几个以做参考(包括但不限与UWA,还有一些普通win8应用):</p><ul><li>奇妙清单(wunderlist)<ul><li>其实奇妙清单有两个版本,一个是普通的win8应用,但是官方又根据UWA开发了一遍,现在UWA版本还是处于BETA阶段,使用还是有一定的BUG,也没有老的版本美观. 如果直接在应用商店搜索只会找到老的版本.</li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRDFXZS&amp;geoMarket=cn" target="_blank" rel="noopener">下载链接</a></li></ul></li><li>office mobile<ul><li>微软现在已经在应用商店提供了几乎全套office下载,包含Word,PowerPoint,Excel,Onenote,Sway(暂时只有移动版和WEB版),Lync,Outlook(其实不叫Outlook,叫作邮件和日历,但本质上就是替代Outlook的功能),OneDrive(其实是win10内置的)</li><li>官方声明在10寸一下设备这些应用都可以一直免费使用.</li><li>但是这些都是针对触屏优化的mobile,更能相对于office 2016简单了不少,对文档的兼容性支持也不足,但是如果电脑性能不足或者对文档编辑的需求不高,使用mobile版本的office还是不错的选择的</li></ul></li><li>下载链接<ul><li><a href="https://www.microsoft.com/store/apps/9wzdncrfjb9s" target="_blank" rel="noopener">Word</a></li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRFJB5Q&amp;geoMarket=cn" target="_blank" rel="noopener">PowerPoint</a></li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRFJBH3&amp;geoMarket=cn" target="_blank" rel="noopener">Excel</a></li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRFHVQM&amp;geoMarket=cn" target="_blank" rel="noopener">邮件与日历(win10内置)</a></li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRD2G0J&amp;geoMarket=cn" target="_blank" rel="noopener">Sway</a></li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRFHVJL&amp;geoMarket=cn" target="_blank" rel="noopener">OneNote</a></li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRFHVHM&amp;geoMarket=cn" target="_blank" rel="noopener">Lync</a></li></ul></li><li>Skype<ul><li>Skype是微软旗下的视频聊天软件,移动版本在电脑上使用一直都有着不熟桌面版本的体验,而且在动画和界面优于桌面版本,但是很奇怪的是前段时间官方声称会停止应用商店内的Skype更新,但是又据说下个版本的win10会集成Skype,对于有视频聊天需求的用户,这当然是最好不过的了.</li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRFJ364&amp;geoMarket=cn" target="_blank" rel="noopener">下载链接</a></li></ul></li><li>Nextgen Reader<ul><li>我一直有着RSS的阅读习惯,但是苦于一直没有喜欢的桌面的RSS阅读软件,一直带feedly网站上看,但是因为是国外网站的原因,而且受限于浏览器,阅读等各方面还是无法有很好的体验,直到我发现了Nextgen Reader,试用了一下,发现体验很好,就果断买了,正巧是降价,6元人民币.</li><li>说下一下使用感受: Nextgen是抓取feedly的消息,过渡过来很简单. 虽然是给平板使用的版本,但是对于键盘快捷键还是有优化的,基本大部分操作可以通过键盘实现. 但是由于不是UWA的原因,使用老式的界面,看上去并没有很优雅. 而且因为是本身不够稳定以及抓取feedly订阅的原因,常常会闪退或者抓取失败,我解决方法就是重启应用. 总的来说这是一个不错的RSS阅读器,可以满足大部分人的需求.</li><li>之前无法刷新出消息,发邮件询问了官方,终于找到了解决的方案,只需要在设置里面启用https协议即可,设置上标注了可能会减慢访问速度,其实感受不出,至少可以刷新出来.</li><li><a href="https://www.microsoft.com/store/apps/9WZDNCRFJ262&amp;geoMarket=cn" target="_blank" rel="noopener">下载链接</a></li></ul></li></ul><p>期待更多的UWA应用会上架,腾讯阿里的应用都在win10发布会展示过,期待BAT的应用上架.</p><h1 id="卸载内置应用"><a href="#卸载内置应用" class="headerlink" title="卸载内置应用"></a>卸载内置应用</h1><p>虽然win10内置通用拥有美观的UI, 但是终归是对触摸屏优化, 如果没有或者不使用触摸屏, 那些应用只会占在那里, 有些还会无耻地成为某些文件的默认启动程序, 不如卸载了</p><ol><li>用管理员身份打开PowerShell(直接搜索并右键以管理员身份运行)</li><li>获取APPX应用清单</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get-appxpackage | select name, packagefullname</span><br></pre></td></tr></table></figure><p>这里我已经获取了一份, 系统号是10532, 可以直接参考(已经删去部分系统lib, runtime, framework和我猜不出的←_←; 不包括完整包名列表)<br><strong>不保证一下每一个应用名对应的应用都正确, 删除请谨慎</strong></p><table><thead><tr><th>对应应用</th><th>应用名</th></tr></thead><tbody><tr><td>Cortana</td><td>Microsoft.Windows.Cortana</td></tr><tr><td>账户管理</td><td>Microsoft.AccountsControl</td></tr><tr><td>应该是锁屏</td><td>Microsoft.LockApp</td></tr><tr><td>Edge浏览器</td><td>Microsoft.MicrosoftEdge</td></tr><tr><td>应该是登录界面的锁</td><td>Microsoft.Windows.AssignedAccessLockApp</td></tr><tr><td>可能是操作中心</td><td>Microsoft.Windows.ContentDeliveryManager</td></tr><tr><td>会员中心</td><td>Microsoft.Windows.FeatureOnDemand.InsiderHub</td></tr><tr><td>家庭成员管理</td><td>Microsoft.Windows.ParentalControls</td></tr><tr><td>反馈</td><td>Microsoft.WindowsFeedback</td></tr><tr><td>联系支持人员</td><td>Windows.ContactSupport</td></tr><tr><td>Miracast组件</td><td>Windows.MiracastView</td></tr><tr><td>人脉</td><td>Microsoft.People</td></tr><tr><td>3D Builder</td><td>Microsoft.3DBuilder</td></tr><tr><td>闹钟和时钟</td><td>Microsoft.WindowsAlarms</td></tr><tr><td>XBox</td><td>Microsoft.XboxApp</td></tr><tr><td>地图</td><td>Microsoft.WindowsMaps</td></tr><tr><td>计算器</td><td>Microsoft.WindowsCalculator</td></tr><tr><td>获取Skype</td><td>Microsoft.SkypeApp</td></tr><tr><td>天气</td><td>Microsoft.BingWeather</td></tr><tr><td>体育</td><td>Microsoft.BingSports</td></tr><tr><td>资讯</td><td>Microsoft.BingNews</td></tr><tr><td>财经</td><td>Microsoft.BingFinance</td></tr><tr><td>应用商店</td><td>Microsoft.WindowsStore</td></tr><tr><td>入门</td><td>Microsoft.Getstarted</td></tr><tr><td>电影和电视</td><td>Microsoft.ZuneVideo</td></tr><tr><td>Groove 音乐</td><td>Microsoft.ZuneMusic</td></tr><tr><td>照片</td><td>Microsoft.Windows.Photos</td></tr><tr><td>相机</td><td>Microsoft.WindowsCamera</td></tr><tr><td>语音录音机</td><td>Microsoft.WindowsSoundRecorder</td></tr><tr><td>获取Office</td><td>Microsoft.MicrosoftOfficeHub</td></tr><tr><td>OneNote</td><td>Microsoft.Office.OneNote</td></tr><tr><td>日历和邮件</td><td>microsoft.windowscommunicationsapps</td></tr></tbody></table><ol><li>开始卸载</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage -allusers *appname* | Remove-AppxPackage</span><br></pre></td></tr></table></figure><p>将appname改写成以上的应用名即可, 如果太长了, 可以在左右加上*作为通配符</p><p>一下是我的卸载清单, 可以直接复制使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get-appxpackage -allusers *onenote* | remove-appxpackage</span><br><span class="line">get-appxpackage -allusers *3dbuilder* | remove-appxpackage</span><br><span class="line">get-appxpackage -allusers *bingsports* | remove-appxpackage</span><br><span class="line">get-appxpackage -allusers *zunevideo* | remove-appxpackage</span><br><span class="line">get-appxpackage -allusers *bingnews* | remove-appxpackage</span><br><span class="line">get-appxpackage -allusers *bingfinance* | remove-appxpackage</span><br><span class="line">get-appxpackage -allusers *officehub* | remove-appxpackage</span><br><span class="line">get-appxpackage -allusers *skype* | remove-appxpackage</span><br></pre></td></tr></table></figure><ol><li>还原 使用一下命令重装所有应用</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage -allusers | foreach &#123;Add-AppxPackage -register &quot;$($_.InstallLocation)appxmanifest.xml&quot; -DisableDevelopmentMode&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高DPI显示&quot;&gt;&lt;a href=&quot;#高DPI显示&quot; class=&quot;headerlink&quot; title=&quot;高DPI显示&quot;&gt;&lt;/a&gt;高DPI显示&lt;/h1&gt;&lt;p&gt;由于win10使用了全新的渲染方式,不同于之前win7,win8的方式,所以会出现大量的软件出现界面模糊的现
      
    
    </summary>
    
    
  </entry>
  
</feed>
